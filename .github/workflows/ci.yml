name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Ruff lint
        run: ruff check .

      - name: Ruff format (check only)
        run: ruff format --check .

      - name: MyPy type-check
        run: |
          if [ -f "mypy.ini" ]; then
            mypy --config-file=mypy.ini src tests
          else
            mypy src tests
          fi

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run tests (pytest + coverage)
        shell: bash
        run: |
          # Pytest picks up --cov settings from pyproject
          pytest
          # Debug: show what coverage files were created
          echo "Coverage files after pytest:"
          ls -la .coverage* || echo "No .coverage* files found after pytest"
          # Rename ALL coverage files so each matrix job is unique
          shopt -s nullglob
          coverage_files=(.coverage*)
          if [ ${#coverage_files[@]} -eq 0 ]; then
            echo "ERROR: No coverage files generated by pytest!"
            exit 1
          fi
          for f in .coverage*; do
            mv "$f" "$f.py${{ matrix.python-version }}"
          done
          # Show what we'll upload (helps debugging)
          echo "Coverage files after renaming:"
          ls -la .coverage* || echo "No .coverage* files found after renaming"

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: |
            .coverage*.py${{ matrix.python-version }}
            coverage.xml
            htmlcov
          if-no-files-found: warn
          retention-days: 7

  coverage:
    name: Combine coverage
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: cov-artifacts

      - name: Combine & report
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install "coverage[toml]>=7.5"
          # Copy every coverage data file shape into CWD
          find cov-artifacts -type f -name ".coverage*" -exec cp {} . \;
          # Debug: show what was downloaded
          echo "Downloaded artifacts structure:"
          find cov-artifacts -type f
          echo "Coverage files found in CWD:"
          ls -la .coverage* || echo "No .coverage* files found in CWD"
          # Check if we have any coverage files at all
          if ! find . -maxdepth 1 -name ".coverage*" | grep -q .; then
            echo "No coverage files found! Exiting..."
            exit 1
          fi
          coverage combine
          coverage report -m
          coverage html
          coverage xml

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
